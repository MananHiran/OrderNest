
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  name: 'name',
  email: 'email',
  password_hash: 'password_hash',
  role: 'role',
  phone: 'phone',
  profile_picture: 'profile_picture',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProductScalarFieldEnum = {
  product_id: 'product_id',
  product_name: 'product_name',
  type: 'type',
  unit_of_measure: 'unit_of_measure',
  current_stock: 'current_stock',
  cost_per_unit: 'cost_per_unit',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BOMScalarFieldEnum = {
  bom_id: 'bom_id',
  product_id: 'product_id',
  component_id: 'component_id',
  quantity_required: 'quantity_required',
  operation_sequence: 'operation_sequence',
  created_at: 'created_at'
};

exports.Prisma.ManufacturingOrderScalarFieldEnum = {
  mo_id: 'mo_id',
  product_id: 'product_id',
  quantity: 'quantity',
  state: 'state',
  status: 'status',
  scheduled_start: 'scheduled_start',
  scheduled_end: 'scheduled_end',
  actual_start: 'actual_start',
  actual_end: 'actual_end',
  created_by: 'created_by',
  assigned_to: 'assigned_to',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WorkOrderScalarFieldEnum = {
  wo_id: 'wo_id',
  mo_id: 'mo_id',
  operation_name: 'operation_name',
  work_center_id: 'work_center_id',
  assigned_to: 'assigned_to',
  status: 'status',
  comments: 'comments',
  planned_time: 'planned_time',
  actual_time: 'actual_time',
  started_at: 'started_at',
  completed_at: 'completed_at'
};

exports.Prisma.WorkCenterScalarFieldEnum = {
  work_center_id: 'work_center_id',
  name: 'name',
  cost_per_hour: 'cost_per_hour',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.StockLedgerScalarFieldEnum = {
  ledger_id: 'ledger_id',
  product_id: 'product_id',
  movement_type: 'movement_type',
  quantity: 'quantity',
  reference_type: 'reference_type',
  reference_id: 'reference_id',
  created_at: 'created_at',
  created_by: 'created_by'
};

exports.Prisma.ReportScalarFieldEnum = {
  report_id: 'report_id',
  user_id: 'user_id',
  report_type: 'report_type',
  data: 'data',
  generated_at: 'generated_at'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  log_id: 'log_id',
  user_id: 'user_id',
  action: 'action',
  timestamp: 'timestamp',
  details: 'details'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  INVENTORY_MANAGER: 'INVENTORY_MANAGER',
  OPERATOR_MANAGER: 'OPERATOR_MANAGER',
  MANUFACTURER_MANAGER: 'MANUFACTURER_MANAGER',
  ADMIN: 'ADMIN'
};

exports.ProductType = exports.$Enums.ProductType = {
  RAW_MATERIAL: 'RAW_MATERIAL',
  FINISHED_GOOD: 'FINISHED_GOOD',
  SEMI_FINISHED: 'SEMI_FINISHED'
};

exports.UnitType = exports.$Enums.UnitType = {
  PCS: 'PCS',
  KG: 'KG',
  LTR: 'LTR',
  MT: 'MT'
};

exports.ComponentState = exports.$Enums.ComponentState = {
  Avaliable: 'Avaliable',
  Not_Avaliable: 'Not_Avaliable'
};

exports.ManufacturingOrderStatus = exports.$Enums.ManufacturingOrderStatus = {
  DRAFT: 'DRAFT',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  TO_CLOSE: 'TO_CLOSE',
  DONE: 'DONE'
};

exports.WorkOrderStatus = exports.$Enums.WorkOrderStatus = {
  NOT_STARTED: 'NOT_STARTED',
  STARTED: 'STARTED',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED'
};

exports.MovementType = exports.$Enums.MovementType = {
  IN: 'IN',
  OUT: 'OUT'
};

exports.ReferenceType = exports.$Enums.ReferenceType = {
  MO: 'MO',
  WO: 'WO',
  MANUAL_ADJUSTMENT: 'MANUAL_ADJUSTMENT'
};

exports.ReportType = exports.$Enums.ReportType = {
  USER_ACTIVITY: 'USER_ACTIVITY',
  PRODUCTION_SUMMARY: 'PRODUCTION_SUMMARY',
  INVENTORY_SUMMARY: 'INVENTORY_SUMMARY'
};

exports.Prisma.ModelName = {
  User: 'User',
  Product: 'Product',
  BOM: 'BOM',
  ManufacturingOrder: 'ManufacturingOrder',
  WorkOrder: 'WorkOrder',
  WorkCenter: 'WorkCenter',
  StockLedger: 'StockLedger',
  Report: 'Report',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
